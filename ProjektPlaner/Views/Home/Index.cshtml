@model List<ProjektPlaner.Models.CalendarDayViewModel>

@{
    ViewData["Title"] = "Calendar";
    var today = DateTime.Today;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Calendar - @today.ToString("MMMM yyyy", System.Globalization.CultureInfo.CreateSpecificCulture("en-US"))</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            text-align: center;
            vertical-align: top;
            height: 100px;
            width: 14.28%;
            padding: 5px;
            font-size: 14px;
        }

        th {
            background-color: #f8f8f8;
            font-weight: bold;
        }

        .event-day {
            /* Subtelny sygnał, że w danym dniu są wydarzenia,
                       np. delikatna obwódka komórki */
            border: 1px solid #cce5ff;
            background-color: #fefefe;
            padding: 5px;
        }

        /* Styl dla pojedynczego wydarzenia */
        .event-entry {
            border: 1px solid #004085;
            background-color: #d7e9ff;
            padding: 4px 6px;
            margin-bottom: 4px;
            border-radius: 3px;
            font-weight: bold;
            display: block;
            text-align: left;
            color: #000;
        }

        .day-number {
            font-weight: bold;
        }
    </style>
</head>
<body>
    @using System.Globalization

    @{
        var currentDisplayedYear = (int)ViewBag.DisplayedYear;
        var currentDisplayedMonth = (int)ViewBag.DisplayedMonth;
        var currentDisplayedDate = new DateTime(currentDisplayedYear, currentDisplayedMonth, 1);

        var prevMonthDate = currentDisplayedDate.AddMonths(-1);
        var nextMonthDate = currentDisplayedDate.AddMonths(1);
    }

    <h1 class="text-center">
        <a href="@Url.Action("Index", new { month = prevMonthDate.Month, year = prevMonthDate.Year })" style="text-decoration: none;">&laquo;</a>
        Calendar for @currentDisplayedDate.ToString("MMMM yyyy", CultureInfo.CreateSpecificCulture("en-US"))
        <a href="@Url.Action("Index", new { month = nextMonthDate.Month, year = nextMonthDate.Year })" style="text-decoration: none;">&raquo;</a>
    </h1>

    <table>
        <thead>
            <tr>
                <th>Mon</th>
                <th>Tue</th>
                <th>Wed</th>
                <th>Thu</th>
                <th>Fri</th>
                <th>Sat</th>
                <th>Sun</th>
            </tr>
        </thead>
        <tbody>
            @{
                var firstDayOfMonth = new DateTime(currentDisplayedYear, currentDisplayedMonth, 1);
                // Obliczanie kolumny, w której zaczyna się pierwszy dzień miesiąca
                int currentDayOfWeek = ((int)firstDayOfMonth.DayOfWeek + 6) % 7;


                int totalDays = Model.Count;
                int dayIndex = 0;

                // Pierwszy tydzień
                <tr>
                    @for (int i = 0; i < 7; i++)
                    {
                        if (i < currentDayOfWeek)
                        {
                            <td></td> <!-- Puste komórki przed 1 dniem miesiąca -->
                        }
                        else if (dayIndex < totalDays)
                        {
                            var day = Model[dayIndex];
                            <td>
                                <div class="day-number">@day.Date.Day</div>
                                @if (day.EventNames.Any())
                                {
                                    foreach (var eventName in day.EventNames)
                                    {
                                        <div class="event-entry">@eventName</div>
                                    }
                                }
                            </td>
                            dayIndex++;
                        }
                        else
                        {
                            <td></td> <!-- Puste komórki po zakończeniu dni miesiąca -->
                        }
                    }
                </tr>

                // Kolejne tygodnie
                while (dayIndex < totalDays)
                {
                    <tr>
                        @for (int i = 0; i < 7; i++)
                        {
                            if (dayIndex < totalDays)
                            {
                                var day = Model[dayIndex];
                                <td class="@(day.EventNames.Any() ? "event-day" : "")">
                                    <div class="day-number">@day.Date.Day</div>
                                    @if (day.EventNames.Any())
                                    {
                                        foreach (var eventName in day.EventNames)
                                        {
                                            <div class="event-entry">@eventName</div>
                                        }
                                    }
                                </td>
                                dayIndex++;
                            }
                            else
                            {
                                <td></td> <!-- Puste komórki po zakończeniu dni miesiąca -->
                            }
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</body>
</html>
